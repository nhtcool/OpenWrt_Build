#
# Copyright (C) 2022 Ing <https://github.com/wjz304>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: Build OpenWrt

on:
  schedule:
    - cron: "0 20 1 * *"
  workflow_dispatch:

jobs:
  matrix:
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.set-matrix.outputs.release }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Generate build matrix
        id: set-matrix
        run: |
          sudo timedatectl set-timezone "Asia/Shanghai"
          echo "release=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT

          # -m 所有项目以逗号分隔，并填满整行行宽
          # -B 不列出任何以 ~ 字符结束的项目
          # -Q 将条目名称括上双引号

          echo "matrix={ \"config\": [ `echo $(ls -mBQ *.config)` ] }" >> $GITHUB_OUTPUT

  build:
    name: Build OpenWrt
    runs-on: ubuntu-latest
    needs: matrix
    env:
      diyscript: diy.sh
      release: ${{ needs.matrix.outputs.release }}
    strategy:
      matrix: ${{ fromJson(needs.matrix.outputs.matrix) }}

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          swap-storage: false

      - name: Init Env
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          sudo timedatectl set-timezone "Asia/Shanghai"

          sudo apt update
          sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
          git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
          libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
          mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools \
          libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
          vim wget xmlto xxd zlib1g-dev python3-setuptools npm
          sudo apt install --reinstall libc6
          sudo systemctl daemon-reload
          sudo apt -y autoremove --purge
          sudo apt clean

          git clone --depth=1 https://github.com/openwrt-dev/po2lmo
          pushd po2lmo
            make && sudo make install
          popd

          df -h

      - name: make
        run: |
          WORKSPACE=${GITHUB_WORKSPACE:-$(pwd)}
          release="${{ env.release }}"
          script="${{ env.diyscript }}"
          config="${{ matrix.config }}"               # config 命名规则: <repo>;<owner>;<name>.config
          CONFIG=${config/.config/}                   # 去掉 .config 后缀
          CONFIG_ARRAY=(${CONFIG//;/ })               # ;号分割

          if [ ${#CONFIG_ARRAY[@]} -ne 3 ]; then
            echo "${config} name error!"
            exit 1
          fi

          CONFIG_REPO="${CONFIG_ARRAY[0]}"
          CONFIG_OWNER="${CONFIG_ARRAY[1]}"
          CONFIG_NAME="${CONFIG_ARRAY[2]}"

          if [ "${CONFIG_REPO}" == "openwrt" ]; then
            REPO_URL="https://github.com/openwrt/openwrt"
            REPO_BRANCH="master"
          fi

          if [ "${CONFIG_REPO}" == "lede" ]; then
            REPO_URL="https://github.com/coolsnowwolf/lede"
            REPO_BRANCH="master"
          fi

          if [ ! -d ${CONFIG_REPO} ]; then
            git clone --depth=1 -b ${REPO_BRANCH} ${REPO_URL} ${CONFIG_REPO}
            if [ -d "${CONFIG_REPO}/package/lean/r8125" ]; then
              rm -rf ${CONFIG_REPO}/package/lean/r8125
            fi
          fi

          # root.
          export FORCE_UNSAFE_CONFIGURE=1

          pushd ${CONFIG_REPO}
          git pull

          # feeds
          sed -i "/src-git ing /d; 1 i src-git ing https://github.com/wjz304/openwrt-packages;${CONFIG_REPO}" feeds.conf.default

          ./scripts/feeds update -a
          if [ -d ./feeds/packages/lang/golang ]; then
            rm -rf ./feeds/packages/lang/golang
            git clone --depth=1 -b 22.x https://github.com/sbwml/packages_lang_golang ./feeds/packages/lang/golang
          fi
          ./scripts/feeds install -a
          ./scripts/feeds uninstall `grep Package ./feeds/ing.index | awk -F': ' '{print $2}'`
          ./scripts/feeds install -p ing -a

          cp -f "${WORKSPACE}/${config}" "./.config"
          cp -f "${WORKSPACE}/${script}" "./diy.sh"

          chmod +x "./diy.sh"
          "./diy.sh" "${CONFIG_REPO}" "${CONFIG_OWNER}"

          make defconfig

          if [ "$GITHUB_ACTIONS" == "true" ]; then
            pushd ${WORKSPACE}
            git pull
            cp -f ${WORKSPACE}/${CONFIG_REPO}/.config "${WORKSPACE}/${config}"
            status=$(git status -s | grep "${config}" | awk '{printf $2}')
            if [ -n "${status}" ]; then
              git add "${status}"
              git commit -m "update $(date +%Y-%m-%d" "%H:%M:%S)"
              git push -f
            fi
            popd
          fi

          echo -e "download package"
          make download -j8 V=s

          # find dl -size -1024c -exec ls -l {} \;
          # find dl -size -1024c -exec rm -f {} \;

          echo -e "$(nproc) thread compile"
          make -j$(nproc) V=s >/dev/null 2>&1 || make -j1 V=s

          DEVICE_NAME=$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/')
     
          pushd bin/targets/*/*
          ls -al

          # sed -i '/buildinfo/d; /\.bin/d; /\.manifest/d' sha256sums
          rm -rf packages *.buildinfo *.manifest *.bin sha256sums

          filename=${CONFIG_REPO}-${CONFIG_NAME}-${release}.zip

          gzip *.img 2>/dev/null || true
          zip -q -r ${filename} *

          if [ "$GITHUB_ACTIONS" == "true" ]; then
            echo "firmware=$(pwd)/${filename}" >> $GITHUB_ENV
          else
            mv -f ${filename} ${WORKSPACE}
          fi
          popd  # bin/targets/*/*
          popd  # ${CONFIG_REPO}

          df -h

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v2
        if: success() && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.release }}
          files: ${{ env.firmware }}

    # - name: Delete workflow runs
    #   uses: Mattraks/delete-workflow-runs@v2
    #   with:
    #     retain_days: 1
    #     keep_minimum_runs: 9

    # - name: Remove old Releases
    #   uses: dev-drprasad/delete-older-releases@v0.1.0
    #   with:
    #     keep_latest: 9
    #     delete_tags: true
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
